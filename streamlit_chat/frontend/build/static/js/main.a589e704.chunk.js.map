{"version":3,"sources":["utils.tsx","stChat.tsx","index.tsx"],"names":["imageFetcher","fetcher","cache","read","input","ref","fetching","type","value","then","catch","e","prefetch","i","a","suspenseFetch","url","Promise","resolve","img","Image","src","onload","width","height","onerror","base","document","body","getClientRects","marked","use","renderer","image","href","title","text","w","h","Chat","render","props","args","isUser","avatarStyle","seed","message","avatarUrl","theme","Avatar","styled","border","borderRadius","margin","Message","div","display","background","secondaryBackgroundColor","padding","maxWidth","fontFamily","font","css","className","alt","draggable","dangerouslySetInnerHTML","__html","highlight","code","hljs","highlightAuto","StreamlitComponentBase","withStreamlitConnection","ReactDOM","StrictMode","fallback","getElementById"],"mappings":"8SA8DO,I,IAAMA,EA3CN,SAA0BC,GAAsB,IAAD,EAC9CC,EAAK,UAAGD,EAAQC,aAAX,QAAoB,GAC/BD,EAAQC,MAAQA,EAChB,IAAMC,EAAO,SAACC,GACZ,IAAMC,EAAMH,EAAME,GAClB,GAAW,MAAPC,EAAa,CACf,IAAMC,EAAWL,EAAQG,GAkBzB,MAjBAF,EAAME,GAAS,CACbG,KAAM,UACNC,MAAOF,GAETA,EACGG,MAAK,SAACD,GACLN,EAAME,GAAS,CACbG,KAAM,SACNC,YAGHE,OAAM,SAACC,GACNT,EAAME,GAAS,CACbG,KAAM,QACNC,MAAOG,MAGPL,EAER,GAAiB,WAAbD,EAAIE,KACN,MAAMF,EAAIG,MAEZ,OAAOH,EAAIG,OAEb,MAAO,CACLL,OACAS,SAAS,WAAD,4BAAE,WAAOC,GAAP,SAAAC,EAAA,+DAENX,EAAKU,GAFC,4HAAF,mDAAC,IAUeE,CAAa,uCAAC,WAAOC,GAAP,SAAAF,EAAA,+EACjC,IAAIG,SAA2C,SAACC,GACrD,IAAMC,EAAM,IAAIC,MAChBD,EAAIE,IAAML,EACVG,EAAIG,OAAS,WACXJ,EAAQ,CACNK,MAAOJ,EAAII,MACXC,OAAQL,EAAIK,UAGhBL,EAAIM,QAAU,WACZP,EAAQ,CACNK,MAAO,EACPC,OAAQ,SAb0B,2CAAD,uDCjDnCE,EAAoB,GADbC,SAASC,KAAKC,iBAAiB,GAC1BN,MAElBO,SAAOC,IAAI,CACTC,SAAU,CACRC,MADQ,SACFC,EAAMC,EAAOC,GACjB,IAAKF,EAAM,MAAO,GAClB,MAA0BlC,EAAaG,KAAK+B,GAApCX,EAAR,EAAQA,MAAOC,EAAf,EAAeA,OACTa,EAAId,EAAQG,EAAOA,EAAOH,EAC1Be,EAAKD,EAAIb,EAAUD,EACzB,MAAM,aAAN,OAAoBW,EAApB,kBAAkCE,EAAlC,2BAAyDC,EAAzD,uBAAyEC,EAAzE,c,IAKAC,E,4MACGC,OAAS,WACd,MAA+C,EAAKC,MAAMC,KAAlDC,EAAR,EAAQA,OAAQC,EAAhB,EAAgBA,YAAaC,EAA7B,EAA6BA,KAAMC,EAAnC,EAAmCA,QAC7BC,EAAS,2CAAuCH,EAAvC,YAAsDC,EAAtD,QAKPG,EAAU,EAAKP,MAAfO,MAIR,IAAKA,EACH,OAAO,oFAIT,IAAMC,EAASC,IAAO/B,IAAI,CACxBgC,OAAO,wBACPC,aAAc,MACd5B,OAAQ,OACRD,MAAO,OACP8B,OAAQ,IAIJC,EAAUJ,IAAOK,IAAI,CACzBC,QAAS,eACTC,WAAYT,EAAMU,yBAClBP,OAAQ,wBACRC,aAAc,OACdO,QAAS,YACTN,OAAQ,WACRO,SAAU,QAINrB,EAAOW,IAAOK,IAAI,CACtBC,QAAS,OAETK,WAAW,GAAD,OAAKb,EAAMc,KAAX,sCACVtC,OAAQ,OACR6B,OAAQ,EACR9B,MAAO,SAET,SAACkB,GACC,OAAIA,EAAME,OACDoB,YAAP,8IAOKA,YAAP,6BAGF,OACE,kBAAC,EAAD,CAAMpB,OAAQA,EAAQqB,UAAU,QAC9B,kBAACf,EAAD,CAAQ5B,IAAK0B,EAAWkB,IAAI,UAAUC,UAAU,UAChD,kBAACZ,EAAD,CACEU,UAAU,UACVG,wBAAyB,CACvBC,OAAQtC,iBAAOgB,EAAS,CACtBuB,UAAW,SAAAC,GAAI,OAAIC,IAAKC,cAAcF,GAAM9D,UACxC,Q,yBAjECiE,KAyEJC,cAAwBnC,GChGvCoC,IAASnC,OACP,kBAAC,IAAMoC,WAAP,KACE,kBAAC,WAAD,CAAUC,SAAU,MAClB,kBAAC,EAAD,QAGJlD,SAASmD,eAAe,U","file":"static/js/main.a589e704.chunk.js","sourcesContent":["type ResultType<O> =\n  | {\n    type: 'pending';\n    value: Promise<O>;\n  }\n  | {\n    type: 'loaded';\n    value: O;\n  }\n  | {\n    type: 'error';\n    value: Error;\n  };\n\ntype Fetcher<O> = {\n  (input: string): Promise<O>;\n  cache?: { [key: string]: ResultType<O> };\n};\n\nexport function suspenseFetch<T>(fetcher: Fetcher<T>) {\n  const cache = fetcher.cache ?? {};\n  fetcher.cache = cache;\n  const read = (input: string): T => {\n    const ref = cache[input];\n    if (ref == null) {\n      const fetching = fetcher(input);\n      cache[input] = {\n        type: 'pending',\n        value: fetching,\n      };\n      fetching\n        .then((value) => {\n          cache[input] = {\n            type: 'loaded',\n            value,\n          };\n        })\n        .catch((e) => {\n          cache[input] = {\n            type: 'error',\n            value: e,\n          };\n        });\n      throw fetching;\n    }\n    if (ref.type !== 'loaded') {\n      throw ref.value;\n    }\n    return ref.value;\n  };\n  return {\n    read,\n    prefetch: async (i: string) => {\n      try {\n        read(i);\n      } catch (e) {\n        await e;\n      }\n    },\n  };\n}\n\nexport const imageFetcher = suspenseFetch(async (url: string) => {\n  return new Promise<{ width: number; height: number }>((resolve) => {\n    const img = new Image();\n    img.src = url;\n    img.onload = () => {\n      resolve({\n        width: img.width,\n        height: img.height,\n      });\n    };\n    img.onerror = () => {\n      resolve({\n        width: 0,\n        height: 0,\n      });\n    };\n  });\n});\n","import {\n  StreamlitComponentBase,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\"\nimport React, { ReactNode } from \"react\"\nimport { marked } from 'marked'\nimport styled from '@emotion/styled'\nimport { css } from '@emotion/react'\nimport hljs from \"highlight.js\"\nimport 'highlight.js/styles/atom-one-light.css'\nimport { imageFetcher } from \"./utils\"\n\nconst node = document.body.getClientRects()[0]\nconst base = node.width * 0.6\n\nmarked.use({\n  renderer: {\n    image(href, title, text) {\n      if (!href) return ''\n      const { width, height } = imageFetcher.read(href)\n      const w = width > base ? base : width\n      const h = (w * height) / width\n      return `<img src=\"${href}\" alt=\"${text}\" style=\"width: ${w}px; height: ${h}px\" />`\n    },\n  },\n})\n\nclass Chat extends StreamlitComponentBase {\n  public render = (): ReactNode => {\n    const { isUser, avatarStyle, seed, message } = this.props.args;\n    const avatarUrl = `https://avatars.dicebear.com/api/${avatarStyle}/${seed}.svg`\n    \n    // Streamlit sends us a theme object via props that we can use to ensure\n    // that our component has visuals that match the active theme in a\n    // streamlit app.\n    const { theme } = this.props\n    \n    // Maintain compatibility with older versions of Streamlit that don't send\n    // a theme object.\n    if (!theme) {\n      return <div>Theme is undefined, please check streamlit version.</div>\n    }\n    \n    // styles for the avatar image\n    const Avatar = styled.img({\n      border: `1px solid transparent`,\n      borderRadius: '50%',\n      height: '3rem',\n      width: '3rem',\n      margin: 0\n    })\n    \n    // styles for the message box\n    const Message = styled.div({\n      display: 'inline-block',\n      background: theme.secondaryBackgroundColor,\n      border: '1px solid transparent',\n      borderRadius: '10px',\n      padding: '10px 14px',\n      margin: '5px 20px',\n      maxWidth: '70%'\n    })\n    \n    // styles for the container\n    const Chat = styled.div({\n      display: 'flex',\n      // flexDirection: 'row',\n      fontFamily: `${theme.font}, 'Segoe UI', 'Roboto', sans-serif`, \n      height: 'auto',\n      margin: 0,\n      width: '100%'\n    }, \n    (props: {isUser: boolean}) => {  // specific styles\n      if (props.isUser){\n        return css`\n          flex-direction: row-reverse;\n          & > div {\n            text-align: right;\n          }\n        `\n      }\n      return css``\n    })\n\n    return (\n      <Chat isUser={isUser} className=\"chat\">\n        <Avatar src={avatarUrl} alt=\"profile\" draggable=\"false\"/>\n        <Message\n          className=\"message\"\n          dangerouslySetInnerHTML={{\n            __html: marked(message, {\n              highlight: code => hljs.highlightAuto(code).value,\n            }) || '',\n          }}\n        />\n      </Chat>\n    )\n  }\n}\n\nexport default withStreamlitConnection(Chat);\n","import React, { Suspense } from \"react\"\nimport ReactDOM from \"react-dom\"\nimport Chat from \"./stChat\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <Suspense fallback={null}>\n      <Chat />\n    </Suspense>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}